This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-07T18:47:36.104Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
functions/
  index.js
  welcome.js
src/
  app/
    globals.css
    layout.tsx
    page.tsx
  assets/
    icons/
      checkmark.svg
      ocaventures.svg
      orangedao.svg
      uchicago.svg
      uiuc.svg
      wallet.svg
  components/
    ResolvConnectButton/
      ResolvConnectButton.css
      ResolvConnectButton.tsx
    Accordion.tsx
    AccordionItem.tsx
    EmailInput.tsx
    ImageViewer.tsx
    ProfileDropdown.tsx
    ReferralTracker.tsx
    Sponsors.tsx
    SpotSecured.tsx
  contexts/
    MasterDataProvider.tsx
    WalletContextProvider.tsx
  hooks/
    useMasterData.tsx
  images/
    index.ts
  interfaces/
    apis/
      master-api.ts
    routes/
      index.d.ts
    sidebar/
      index.d.ts
  utils/
    constants.ts
.eslintrc.json
.gitignore
CNAME
edge-functions-import-map.json
index.js
LICENSE
netlify.toml
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: functions/index.js
================
const { Client, LogLevel } = require('@notionhq/client');

const { NOTION_API_TOKEN, NOTION_DATABASE_ID } = process.env;

async function addEmail(email) {
  // Initialize Notion client
  const notion = new Client({
    auth: NOTION_API_TOKEN,
    logLevel: LogLevel.DEBUG,
  });

  await notion.pages.create({
    parent: {
      database_id: NOTION_DATABASE_ID,
    },
    properties: {
      Email: {
        title: [
          {
            text: {
              content: email,
            },
          },
        ],
      },
    },
  });
}

function validateEmail(email) {
  return email.indexOf('@') !== -1;
}

module.exports.handler = async function (event, context) {
  // Check the request method
  if (event.httpMethod != 'POST') {
    return { statusCode: 405, body: 'Method not allowed' };
  }

  // Get the body
  try {
    var body = JSON.parse(event.body);
  } catch (err) {
    return {
      statusCode: 400,
      body: err.toString(),
    };
    return;
  }

  // Validate the email
  const { email } = body;
  if (!validateEmail(email)) {
    return { statusCode: 400, body: 'Email is not valid' };
  }

  // Store email in Notion
  await addEmail(email);
  return { statusCode: 200, body: 'ok' };
};

================
File: functions/welcome.js
================
const { Client, LogLevel } = require('@notionhq/client');
const mailgun = require('mailgun-js');

const {
  NOTION_API_TOKEN,
  NOTION_DATABASE_ID,
  MAILGUN_API_KEY,
  MAILGUN_DOMAIN,
} = process.env;

async function fetchNewSignups() {
  // Initialize notion client
  const notion = new Client({
    auth: NOTION_API_TOKEN,
    logLevel: LogLevel.DEBUG,
  });

  // Create a datetime that is 30 mins earlier than the current time
  let fetchAfterDate = new Date();
  fetchAfterDate.setMinutes(fetchAfterDate.getMinutes() - 30);

  // Query the database
  // and fetch only entries created in the last 30 mins
  const response = await notion.databases.query({
    database_id: NOTION_DATABASE_ID,
    filter: {
      or: [
        {
          property: 'Added On',
          date: {
            after: fetchAfterDate,
          },
        },
      ],
    },
  });

  const emails = response.results.map((entry) => entry.properties.Email.title[0].plain_text);

  return emails;
}

async function sendWelcomeEmail(to) {
  const mg = mailgun({ apiKey: MAILGUN_API_KEY, domain: MAILGUN_DOMAIN });

  const data = {
    from: `Resolv <Resolv@${MAILGUN_DOMAIN}>`,
    to: to,
    subject: "You're on the Waitlist! ",
    text: "You have successfully signed up for the Resolv Waitlist! We'll check back soon with more updates! In the meantime, stay frosty ;)",
  };

  await mg.messages().send(data);
}

module.exports.handler = async function (event, context) {
  // Check the request method
  if (event.httpMethod != 'POST') {
    return { statusCode: 405, body: 'Method not allowed' };
  }

  const emails = await fetchNewSignups();

  emails.forEach(async (email) => {
    await sendWelcomeEmail(email);
  });

  return { statusCode: 200, body: 'ok' };
};

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
    animation: fadeInAnimation ease 3s;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
}
 
@keyframes fadeInAnimation {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
     }
}

html {
  font-size: 11px;
  @screen sm {
    font-size: 13px;
  }
  @screen md {
    font-size: 18px;
  }
}

================
File: src/app/layout.tsx
================
import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { WalletContextProvider } from "@/contexts/WalletContextProvider";
import Script from "next/script";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Resolv",
  description: "Something about Resolv",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link
          href="https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
          rel="stylesheet"
        />
        <Script
          strategy="afterInteractive"
          src={`https://www.googletagmanager.com/gtag/js?id=G-LFPBC07F7M`}
        />
        <Script
          id="google-analytics"
          strategy="afterInteractive"
          dangerouslySetInnerHTML={{
            __html: `
              window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());
              gtag('config', 'G-LFPBC07F7M');
            `,
          }}
        />
      </head>
      <WalletContextProvider>
        <body
          className={`${inter.className} mt-8 font-raleway text-gray-dark transition-opacity ease-in-out opacity-0 <STATE>:opacity-100 duration-300`}
        >
          {children}
        </body>
      </WalletContextProvider>
    </html>
  );
}

================
File: src/app/page.tsx
================
"use client";

import Image from "next/image";
import {
  ArrowsIcon,
  CheckIcon,
  CircleArrowIcon,
  CongratsBox,
  GoodNewsBox,
  Logo,
  ResolvButton,
  ShieldIcon,
} from "../images/index";
import { Accordion } from "@/components/Accordion";
import { ImageViewer } from "@/components/ImageViewer";
import { EmailInput } from "@/components/EmailInput";
import { Inter } from "next/font/google";
import ResolvConnectButton from "@/components/ResolvConnectButton/ResolvConnectButton";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import WalletIcon from "../assets/icons/wallet.svg";
import Sponsors from "@/components/Sponsors";
import { useAccount } from "wagmi";
import { useState, useEffect, useRef } from "react";
import SpotSecured from "@/components/SpotSecured";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const account = useAccount();
  const { address } = account;
  const [isWalletConnected, setIsWalletConnected] = useState<boolean>(false);
  let storedAddress = useRef<string | null>(null);

  useEffect(() => {
    storedAddress.current = localStorage.getItem("walletAddress");
    console.log(account);
  }, []);

  useEffect(() => {
    if (!address) {
      if (storedAddress.current) {
        setIsWalletConnected(true);
      } else {
        setIsWalletConnected(false);
      }
    } else {
      setIsWalletConnected(true);
    }
  }, [address]);

  useEffect(() => {
    if (!address) {
      localStorage.removeItem("walletAddress");
      setIsWalletConnected(false);
    }
  }, [address]);

  return (
    <div>
      <header className="flex justify-between w-full max-w-[900px] mx-auto px-10">
        <div className="flex items-center">
          <Image src={Logo} alt="Resolv" className="w-h-logo" />
          <span className="pl-2 text-3xl font-bold text-black">Resolv</span>
        </div>
        {address ? (
          <ResolvConnectButton styles="flex justify-center w-fit border border-2 border-black rounded-full py-2 px-4" />
        ) : (
          <ConnectButton.Custom>
            {({
              account,
              chain,
              openAccountModal,
              openChainModal,
              openConnectModal,
              authenticationStatus,
              mounted,
            }) => {
              // Note: If your app doesn't use authentication, you
              // can remove all 'authenticationStatus' checks
              const ready = mounted && authenticationStatus !== "loading";
              const connected =
                ready &&
                account &&
                chain &&
                (!authenticationStatus ||
                  authenticationStatus === "authenticated");

              return (
                <div
                  {...(!ready && {
                    "aria-hidden": true,
                  })}
                >
                  {(() => {
                    return (
                      <button
                        onClick={openConnectModal}
                        type="button"
                        className="flex justify-center w-fit border border-2 border-black rounded-full py-2 px-4"
                      >
                        <div className="h-[50%] flex items-center">
                          {" "}
                          {/* Container for the icon */}
                        </div>
                        {storedAddress.current || "Connect Wallet"}
                      </button>
                    );
                  })()}
                </div>
              );
            }}
          </ConnectButton.Custom>
        )}
      </header>

      <div className="container px-10 md:px-0 mt-24">
        {isWalletConnected && (
          <div className="flex items-center justify-center mb-2">
            <div className="relative inline-block">
              <div className="absolute inset-0 bg-gradient-to-r from-blue-200 to-green-200 rounded-full blur-sm"></div>
              <SpotSecured />
            </div>
          </div>
        )}

        <h1 className="md:text-[4rem] text-10xl font-bold text-center leading-extra-tight mb-8">
          Put stolen crypto
          <br />
          back in your wallet.
        </h1>
        <h2
          className={`${inter.className} text-center mb-16 font-regular text-2xl`}
        >
          Become an early adopter and connect your wallet to get $250,000 in
          free protection upon release.
        </h2>

        {isWalletConnected == false && (
          <div className="flex items-center justify-center mb-16">
            <div className="relative inline-block">
              <div className="absolute inset-0 bg-gradient-to-r from-blue-200 to-green-200 rounded-full blur-sm"></div>
              <ResolvConnectButton
                icon={WalletIcon}
                styles="relative h-[64px] px-6 py-3 bg-gradient-to-r from-[#D1FFE7] to-[#D0EAFF] shadow-resolv-button rounded-full text-gray-800 font-semibold flex items-center space-x-2 shadow-md transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)] hover:translate-y-[1px] hover:shadow-none focus:outline-none"
              />
            </div>
          </div>
        )}

        {isWalletConnected == true && <EmailInput />}

        <Sponsors />

        <div className="flex items-center justify-center m-28">
          <span className="font-medium text-3xl pr-2">Explore</span>
          <Image src={CircleArrowIcon} alt="" className="w-explore" />
        </div>

        <h2 className="sm:text-6xl text-8xl mt-18 font-semibold">
          Cold storage safety, hot wallet ease. Our Protection Protocol&#8482;
          offers:
        </h2>

        <div className="rounded-4xl p-12 bg-blue mt-11">
          <div className="bg-black rounded-full w-17 h-17 flex items-center text-center">
            <Image src={ArrowsIcon} alt="" className="mx-auto w-8" />
          </div>
          <div className="text-7xl mt-7 font-bold">
            <h1>Zero liability fraud protection</h1>
            <p className="text-base leading-snug font-normal mt-4">
              Theft happens, even to the best of us. One mistake shouldn&apos;t
              cost you everything. We make sure it doesn&apos;t.
            </p>
          </div>
        </div>

        <div className="grid md:grid-cols-2 gap-6 mt-6">
          <div className="rounded-4xl p-12 bg-green">
            <div className="bg-black rounded-full w-17 h-17 flex items-center text-center">
              <Image src={CheckIcon} alt="" className="mx-auto w-8" />
            </div>
            <div className="text-6xl mt-6 font-bold">
              <h1>A decentralized vault</h1>
              <p className="text-base leading-snug font-normal mt-4">
                Forget blind trust. Our multi-sig contract with distributed
                signing keys secures your funds without you ever having to worry
                about being rugged.
              </p>
            </div>
          </div>

          <div className="rounded-4xl p-12 bg-gray">
            <div className="bg-black rounded-full w-17 h-17 flex items-center text-center">
              <Image src={ShieldIcon} alt="" className="mx-auto w-6" />
            </div>
            <div className="text-6xl mt-6 font-bold">
              <h1>And a decentralized jury system</h1>
              <p className="text-base leading-snug font-normal mt-4">
                Trusted insurance companies, on-chain forensic investigators,
                and security pros ensure every case gets a fair review.
              </p>
            </div>
          </div>
        </div>

        <h2 className="text-7xl mt-28 font-semibold">
          All controlled from a simple dashboard that even your{" "}
          <span className="text-blue-dark">grandma</span> can use.
        </h2>

        <ImageViewer />

        <div className="grid md:grid-cols-2 md:gap-8 mt-28 items-center">
          <div className="py-8 pl-4 md:order-2">
            <div className="rounded-3xl bg-gradient-to-br from-blue to-green py-2 px-6 font-bold inline-block text-xl">
              Step 1
            </div>
            <div className="text-10xl font-bold mt-6">
              Protect
              <br />
              your tokens
            </div>
            <div className="text-lg mt-5">
              Wrap your ERC-20s and recieve pTokens in exchange. A recoverable
              alternative backed by your deposit.
            </div>
          </div>

          <div className="rounded-4xl p-6 flex items-center bg-gray h-98">
            <div className="image-container bg-white h-full w-full rounded-4xl flex items-center">
              <Image
                src={CongratsBox}
                alt=""
                className="mx-auto bg-white rounded-2xl w-69"
              />
            </div>
          </div>
        </div>

        <div className="grid md:grid-cols-2 md:gap-8 mt-24 items-center">
          <div className="py-8 pl-4">
            <div className="rounded-3xl bg-gradient-to-br from-blue to-green py-2 px-6 font-bold inline-block text-xl">
              Step 2
            </div>
            <div className="text-10xl font-bold mt-6">File a claim</div>
            <div className="text-lg mt-5">
              We hope you don&apos;t get your funds
              <br />
              stolen, but if you do, simply Resolv
              <br />
              the transaction.
            </div>
          </div>

          <div className="rounded-4xl pr-8 py-20 flex items-center bg-gray h-98">
            <Image src={ResolvButton} alt="" />
          </div>
        </div>

        <div className="grid md:grid-cols-2 md:gap-8 mt-24 items-center">
          <div className="py-8 pl-4 md:order-2">
            <div className="rounded-3xl bg-gradient-to-br from-blue to-green py-2 px-6 font-bold inline-block text-xl">
              Step 3
            </div>
            <div className="text-10xl font-bold mt-6">
              Get your
              <br />
              crypto back
            </div>
            <div className="text-lg mt-5">
              Once the Resolvrs verify the fraud, your funds are sent to your
              designated recovery wallet.
            </div>
          </div>

          <div className="rounded-4xl p-16 flex items-center bg-gray h-98">
            <Image
              src={GoodNewsBox}
              alt=""
              className="mx-auto bg-white rounded-2xl w-fit"
            />
          </div>
        </div>
      </div>

      <div className="w-full bg-blue mt-28">
        <div className="container grid lg:grid-cols-2 items-center">
          <div className="pt-8 pl-8 lg:pb-8 lg:pr-8">
            <div className="text-9xl font-bold">Frequently asked questions</div>
            <div className="font-medium mt-6">
              We get it. It&apos;s a lot to take in.
              <br />
              Hope these FAQ&apos;s help.
            </div>
          </div>

          <Accordion />
        </div>
      </div>

      <footer className="my-24 container px-6">
        <div className="flex items-center">
          <Image src={Logo} alt="Resolv" className="w-f-logo" />
          <span className="text-6xl font-bold text-black pl-2">Resolv</span>
        </div>
      </footer>
    </div>
  );
}

================
File: src/components/ResolvConnectButton/ResolvConnectButton.css
================
.connect-button[data-ready="false"] {
  opacity: 0;
  pointer-events: none;
  user-select: none;
}

================
File: src/components/ResolvConnectButton/ResolvConnectButton.tsx
================
"use client";

import { ConnectButton } from "@rainbow-me/rainbowkit";
import { useEffect, useContext, useState, useRef, useLayoutEffect } from "react";
import "./ResolvConnectButton.css";
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";
import { useAccount, useDisconnect } from 'wagmi';
import axios from 'axios'; // Make sure to install axios if not already installed
import Image from "../../../node_modules/next/image";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

const ResolvConnectButton = ({styles, icon} : {styles: string, icon?: string}) => {
  const [isMobile, setIsMobile] = useState<boolean>(false);
  const [doesWalletExist, setDoesWalletExist] = useState<boolean>(false);
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);
  const account = useAccount();
  const {address} = account
  const {disconnect} = useDisconnect()

  useEffect(() => {
    setIsMobile(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent));
  }, []);

  useEffect(() => {
    const checkLoginStatus = () => {
      // Check if user is logged in (you might want to use a more robust method)
      const userToken = localStorage.getItem('userToken');
      setIsLoggedIn(!!userToken);
    };

    checkLoginStatus();
  }, []);

  const [shouldCheckWallet, setShouldCheckWallet] = useState(false);
  const prevAddressRef = useRef<string | undefined>();

  useLayoutEffect(() => {
    if (address !== prevAddressRef.current) {
      prevAddressRef.current = address;
      setShouldCheckWallet(true);
    }
  }, [address]);

  useEffect(() => {
    if (shouldCheckWallet) {
      const checkWalletExists = async () => {
        if (address) {
          try {
            console.log("Calling backend");
            const response = await axios.post('https://dkq9ddk2fc.execute-api.us-east-1.amazonaws.com/Prod/checkIfWalletExists', { walletAddress: address });
            const { exists } = response.data;
            console.log(response.data);
            setDoesWalletExist(exists);
            if (!exists) {
              localStorage.setItem('walletAddress', address);
              const response = await axios.post('https://dkq9ddk2fc.execute-api.us-east-1.amazonaws.com/Prod/add-wallet', { walletAddress: address });
              console.log(response.data);
            } 
          } catch (error) {
            console.error('Error checking wallet:', error);
            disconnect();
          }
        }
      };

      checkWalletExists();
      setShouldCheckWallet(false);
    }
  }, [shouldCheckWallet, address, disconnect]);

  return (
    <ConnectButton.Custom>
      {({
        account,
        chain,
        openAccountModal,
        openChainModal,
        openConnectModal,
        mounted,
      }) => {
        // Note: If your app doesn't use authentication, you
        // can remove all 'authenticationStatus' checks
        const ready = mounted;
        const connected =
          ready &&
          account &&
          chain
        return (
          <div
            className="connect-button"
            {...(!ready && {
              "data-ready": false,
            })}
          >
            {(() => {
              if (!connected) {
                return (
                    <button
                      onClick={openConnectModal}
                      type="button"
                      className={cn(styles, "flex gap-2")}
                    >
                      <div className="h-[50%] flex items-center"> {/* Container for the icon */}
                        {icon && <Image 
                          src={icon!} 
                          alt="icon" 
                          className="h-full w-auto transform rotate-12" // Make height 100% of parent (which is 80% of button height)
                        />}
                      </div>
                      Connect Wallet
                    </button>
                );
              }
              if (chain.unsupported) {
                return (
                  <button onClick={openChainModal} type="button">
                    Wrong network
                  </button>
                );
              }
              return (
                <div className="flex gap-[12px]">
                  <button
                    onClick={openAccountModal}
                    type="button"
                    className="flex justify-center w-fit bg-stone-200 rounded-full py-2 px-4"
                  >
                    {account.displayName}
                    {account.displayBalance && !isMobile
                      ? ` (${account.displayBalance})`
                      : ""}
                  </button>
                  <button
                    onClick={openChainModal}
                    type="button"
                    className="hidden sm:flex sm:items-center"
                  >
                    {chain.hasIcon && (
                      <div
                        className={`bg-${chain?.iconBackground} w-[12px] h-[12px] rounded-full overflow-hidden mr-[4px]`}
                      >
                        {chain.iconUrl && (
                          <img
                            className="w-[12px] h-[12px]"
                            alt={chain.name ?? "Chain icon"}
                            src={chain.iconUrl}
                          />
                        )}
                      </div>
                    )}
                    {chain.name}
                  </button>
                </div>
              );
            })()}
          </div>
        );
      }}
    </ConnectButton.Custom>
  );
};

export default ResolvConnectButton;

================
File: src/components/Accordion.tsx
================
"use client";
import { useState } from "react";
import { AccordionItem } from "./AccordionItem";

const faqs = [
  {
    id: 1,
    question: "Can I recover funds that have been stolen before using Resolv?",
    answer:
      "Unfortunately, Resolv's Protection Protocol is proactive and not retroactive. This means that any funds lost in the past, prior to protecting them with Resolv, are irrecoverable.",
  },
  {
    id: 2,
    question: "Is Resolv secure?",
    answer:
      "Yes, Resolv is secure. Funds are held in a multi-signature custodian wallet backed by Gnosis' industry-standard infrastructure. The private keys for the wallet are distributed amongst several trusted players in the industry and are not solely held by Resolv. So you can rest easy knowing that your assets are safe and no individual can run away with the whole lot.",
  },
  {
    id: 3,
    question: "How does this work?",
    answer:
      '<a href="https://resolvfinance.notion.site/Resolv-One-Pager-8dc80169fff5439d930ad3567c443156" target="_blank" class="text-blue-dark hover:text-gray-light">Our One-Pager</a>',
  },
  {
    id: 4,
    question: "Doesn't this go against the ethos of Crypto?",
    answer:
      'No. In fact, it embodies all that crypto stands for! Vitalik Beutrin explains that the goal of crypto was never to remove all trust. Instead, it is to give people the choice of whom to trust. Crypto should ultimately give "<a href="https://hackernoon.com/what-is-a-social-recovery-wallet" target="_blank" class="text-blue-dark hover:text-gray-light">someone the power to do some things on your behalf without giving them the power to do everything</a>." Multi-sig is a perfect expression of this. It assures users that their funds can be securely held and <a href="https://chain.link/proof-of-reserve" target="_blank" class="text-blue-dark hover:text-gray-light">verified</a>, without having to worry that one entity will run off with the pot.',
  },
];

export function Accordion() {
  const [openFaq, setOpenFaq] = useState(0);

  const faqClickHandler = (faqId: number) => {
    const newOpenFaq = openFaq === faqId ? 0 : faqId;
    setOpenFaq(newOpenFaq);
  };

  return (
    <div className="py-16 px-8">
      {faqs.map((faq) => (
        <AccordionItem
          key={faq.id}
          id={faq.id}
          question={faq.question}
          answer={faq.answer}
          clickHandler={() => faqClickHandler(faq.id)}
          currentFaq={openFaq}
        />
      ))}
    </div>
  );
}

================
File: src/components/AccordionItem.tsx
================
type AccordionItemProps = {
  id: number
  question: string
  answer: string
  clickHandler: React.MouseEventHandler
  currentFaq: number
}

export function AccordionItem({ id, question, answer, clickHandler, currentFaq }: AccordionItemProps) {
  return (
    <div className="border-b-gray-border border-b-2 py-4 last:border-0">
      <div className="flex flex-row items-center cursor-pointer" onClick={clickHandler}>
        <div className="accordion-button w-7 h-7 relative flex-shrink-0">
          <span className={`bg-blue-dark absolute duration-500 rounded-sm top-1/4 bottom-1/4 w-[7%] left-[47%] ${currentFaq === id ? "transition-transform rotate-90" : ""}`}></span>
          <span className={`bg-blue-dark absolute duration-500 rounded-sm h-[7%] top-[45%] ${currentFaq === id ? "transition-transform rotate-90 left-1/2 right-1/2" : "left-1/4 right-1/4"}`}></span>
        </div>
        <div className="font-semibold">{question}</div>
      </div>
      <div className={`text-sm ml-7 mt-2 overflow-hidden transition-[max-height] duration-500 ${currentFaq === id ? " max-h-96" : "max-h-0"}`} dangerouslySetInnerHTML={{ __html: answer }}></div>
    </div>
  )
}

================
File: src/components/EmailInput.tsx
================
"use client";
import { useState } from "react";

type ServerRepsonse = {
  status: string;
  message: string;
};

export function EmailInput() {
  const [serverResponse, setServerResponse] = useState({
    status: "idle",
    message: "",
  } as ServerRepsonse);

  async function registerUser(data: FormData) {
    try {
      const email = data.get("email")?.valueOf().toString();
      if (
        typeof email !== "string" ||
        email.length === 0 ||
        email.indexOf("@") === -1
      ) {
        throw new Error("Please enter a valid email");
      }

      const headers = new Headers();
      headers.append("Content-Type", "application/json");

      const options = {
        method: "POST",
        headers,
        body: JSON.stringify({ email }),
      };

      const response = await fetch("/.netlify/functions/index", options);

      if (response.ok) {
        const successMsg = "Thanks for subscribing to our updates.";
        setServerResponse({
          status: "success",
          message: successMsg,
        });
        const timer = setTimeout(() => {
          setServerResponse({
            status: "idle",
            message: successMsg,
          });
          clearTimeout(timer);
        }, 5000);
      } else {
        throw new Error("Server Error. Please try again later.");
      }
    } catch (error) {
      let errorMsg = "There was some problem adding your email.";
      if (error instanceof Error) {
        errorMsg = error.message;
      }
      setServerResponse({
        status: "failed",
        message: errorMsg,
      });
      const timer = setTimeout(() => {
        setServerResponse({
          status: "idle",
          message: errorMsg,
        });
        clearTimeout(timer);
      }, 5000);
    }
  }

  return (
    <div className="mx-auto mb-16 w-full md:w-email">
      <form action={registerUser} className="relative flex items-center w-full">
        <input
          type="text"
          className="h-email w-full text-base font-medium pl-8 pr-44 rounded-full border-2 border-gray hover:border-gray-light"
          placeholder="Email"
          name="email"
        />
        <div className="absolute right-2">
          <button
            type="submit"
            className="h-10 w-34 text-gray-dark font-semibold text-sm rounded-full bg-blue bg-gradient-to-br from-blue to-green hover:bg-red"
          >
            Stay Updated
          </button>
        </div>
      </form>
      <div
        className={`${
          serverResponse.status === "success"
            ? "text-green-success"
            : "text-red"
        } text-center transition-opacity duration-500 ease-linear ${
          serverResponse.status === "idle" ? "opacity-0" : "opacity-100"
        }`}
      >
        {serverResponse.message}
      </div>
    </div>
  );
}

================
File: src/components/ImageViewer.tsx
================
'use client';
import { useState } from "react";
import Image, { StaticImageData } from "next/image";
import { BlackArrowsIcon, Logo, ProtectBox, ReturnStolenBox, SwapTokensBox, WalletIcon } from "../images/index";

export function ImageViewer() {
  const [currentImg, setCurrentImg] = useState(ProtectBox);
  const [imgChanged, setImageChanged] = useState(false);

  const imageClickHandler = (newImg: StaticImageData) => {
    if (newImg === currentImg) {
      return
    }
    setImageChanged(true);
    window.setTimeout(() => {
      setCurrentImg(newImg);
      setImageChanged(false);
    }, 300);
  };

  return <>
    <div className="rounded-4xl p-6 bg-gradient-to-br from-blue to-green mt-12">
      <Image src={currentImg} alt="" className={`bg-white rounded-xl w-full transition-opacity duration-300 ease-linear ${imgChanged ? "opacity-0" : "opacity-100"}`} />
    </div>

    <div className="grid grid-cols-3 gap-7 mt-7">
      <div className={`rounded-25xl p-8 ${currentImg === ProtectBox ? "bg-gradient-to-br from-blue to-green" : "bg-gray cursor-pointer"}`} onClick={() => imageClickHandler(ProtectBox)}>
        <div className="w-13 h-12 flex items-center text-center mx-auto md:mx-0">
          <Image src={Logo} alt="Protect your crypto" className="mx-auto w-full" />
        </div>
        <div className="text-3xl mt-4 font-bold hidden md:block">
          Protect your
          <br />
          crypto
        </div>
      </div>

      <div className={`rounded-25xl p-8 ${currentImg === SwapTokensBox ? "bg-gradient-to-br from-blue to-green" : "bg-gray cursor-pointer"}`} onClick={() => imageClickHandler(SwapTokensBox)}>
        <div className="w-10 h-12 flex items-center text-center mx-auto md:mx-0">
          <Image src={BlackArrowsIcon} alt="Swap your tokens" className="mx-auto w-full" />
        </div>
        <div className="text-3xl mt-4 font-bold hidden md:block">
          Swap your
          <br />
          tokens
        </div>
      </div>

      <div className={`rounded-25xl p-8 ${currentImg === ReturnStolenBox ? "bg-gradient-to-br from-blue to-green" : "bg-gray cursor-pointer"}`} onClick={() => imageClickHandler(ReturnStolenBox)}>
        <div className="w-8 h-12 flex items-center text-center mx-auto md:mx-0">
          <Image src={WalletIcon} alt="Swap your tokens" className="mx-auto w-full" />
        </div>
        <div className="text-3xl mt-4 font-bold hidden md:block">
          Return stolen
          <br />
          funds
        </div>
      </div>
    </div>
  </>
}

================
File: src/components/ProfileDropdown.tsx
================
import React, { useState } from "react";
import Image from "next/image";
import { useAccount, useBalance, useDisconnect } from "wagmi";
import { shortenAddress } from "@/utils/address";
import { ReferralTracker } from "./ReferralTracker";

interface ProfileDropdownProps {
  email: string;
  onEmailChange: (email: string) => void;
}

export const ProfileDropdown: React.FC<ProfileDropdownProps> = ({
  email,
  onEmailChange,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const { address } = useAccount();
  const { data: balance } = useBalance({ address });
  const { disconnect } = useDisconnect();
  const [referralCode, setReferralCode] = useState("");

  const toggleDropdown = () => setIsOpen(!isOpen);

  React.useEffect(() => {
    // Dummy callback to get referral code
    const fetchReferralCode = async () => {
      // Replace this with actual API call later
      setReferralCode("ABC123");
    };
    fetchReferralCode();
  }, []);

  return (
    <div className="relative">
      <button onClick={toggleDropdown} className="p-2 rounded-full bg-gray-200">
        <Image src="/profile-icon.svg" alt="Profile" width={24} height={24} />
      </button>
      {isOpen && (
        <div className="absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg p-4">
          <p className="text-sm font-medium">{shortenAddress(address)}</p>
          <p className="text-sm mt-2">
            Balance: {balance?.formatted} {balance?.symbol}
          </p>
          {email ? (
            <p className="text-sm mt-2">{email}</p>
          ) : (
            <input
              type="email"
              placeholder="Enter your email"
              className="mt-2 w-full p-2 border rounded-md text-sm placeholder-red-300"
              onChange={(e) => onEmailChange(e.target.value)}
            />
          )}
          <div className="mt-4">
            <ReferralTracker status="bronze" />
          </div>
          <p className="text-sm mt-4">Referral Code: {referralCode}</p>
          <button
            onClick={() => disconnect()}
            className="mt-4 w-full p-2 bg-red-500 text-white rounded-md text-sm"
          >
            Sign Out
          </button>
        </div>
      )}
    </div>
  );
};

================
File: src/components/ReferralTracker.tsx
================
import React from "react";

interface ReferralTrackerProps {
  status: "bronze" | "silver" | "gold";
}

export const ReferralTracker: React.FC<ReferralTrackerProps> = ({ status }) => {
  const getStatusInfo = () => {
    switch (status) {
      case "bronze":
        return {
          text: "2 referrals away from 1 year",
          months: 6,
          completed: 1,
        };
      case "silver":
        return { text: "1 referral away from 1 year", months: 9, completed: 2 };
      case "gold":
        return {
          text: "Congrats! You've secured 1 year in",
          months: 12,
          completed: 3,
        };
      default:
        return {
          text: "3 referrals away from 1 year",
          months: 3,
          completed: 0,
        };
    }
  };

  const { text, months, completed } = getStatusInfo();

  return (
    <div className="bg-gray-100 rounded-lg p-4 shadow-sm">
      <h3 className="text-lg font-semibold mb-2">Referral tracker</h3>
      <p className="text-sm text-gray-600 mb-4">{text} of free protection.</p>
      <div className="flex space-x-2 mb-4">
        {[0, 1, 2].map((index) => (
          <div
            key={index}
            className={`h-2 flex-1 rounded-full ${
              index < completed ? "bg-orange-400" : "bg-gray-300"
            }`}
          ></div>
        ))}
      </div>
      {status !== "gold" && (
        <p className="text-sm font-medium">
          🥉 {status === "silver" ? "🥈" : ""} {status} status
        </p>
      )}
      {status === "gold" && (
        <p className="text-sm font-medium">🥇 Gold status</p>
      )}
      <p className="text-sm font-semibold mt-2">
        {months} months free protection!
      </p>
    </div>
  );
};

================
File: src/components/Sponsors.tsx
================
import React from "react";
import uiucicon from "../assets/icons/uiuc.svg";
import orangedaoicon from "../assets/icons/orangedao.svg";
import uchicagoicon from "../assets/icons/uchicago.svg";
import ocaventuresicon from "../assets/icons/ocaventures.svg";
import Image from "next/image";

const Sponsors = () => {
  return (
    <div className="relative w-screen left-1/2 right-1/2 -mx-[50vw]">
      <div className="max-w-screen-2xl mx-auto px-4">
        <div className="flex w-full bg-stoneGray rounded-[5rem] ring ring-stoneGrayDark ring-1 p-8 overflow-x-auto">
          <div className="flex flex-nowrap w-full justify-between gap-8 items-center min-w-max">
            <div className="shrink-0">
              Backed by world-class
              <br />
              investors, including
            </div>
            <Image src={uiucicon} alt="UIUC" className="sm:h-auto w-auto h-6" />
            <Image
              src={orangedaoicon}
              alt="Orange DAO"
              className="sm:h-auto w-auto h-6"
            />
            <Image
              src={uchicagoicon}
              alt="University of Chicago"
              className="sm:h-auto w-auto h-6"
            />
            <Image
              src={ocaventuresicon}
              alt="OCA Ventures"
              className="sm:h-auto w-auto h-6"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Sponsors;

================
File: src/components/SpotSecured.tsx
================
import React from "react";
import Image from "next/image";
import checkmarkIcon from "../assets/icons/checkmark.svg";

const SpotSecured = () => {
  return (
    <div className="relative sm:h-[64px] sm:px-4 sm:py-2 p-6 bg-gradient-to-r from-[#D1FFE7] to-[#D0EAFF] shadow-resolv-button rounded-full text-sm flex items-center gap-2 space-x-2 transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)] focus:outline-none">
      <div className="h-1/3 flex items-center">
        <Image
          src={checkmarkIcon!}
          alt="icon"
          className="h-full w-auto transform" // Make height 100% of parent (which is 80% of button height)
        />
      </div>
      Spot Secured
    </div>
  );
};

export default SpotSecured;

================
File: src/contexts/MasterDataProvider.tsx
================
"use client";
import React from "react";
import { useMasterData } from "./../hooks/useMasterData";
import { ICurrency, IMasterChain } from "@/interfaces/apis/master-api";

export type MasterDataContextType = {
  supportedChains: IMasterChain[];
  currencies: ICurrency[];
};

export const MasterDataContext = React.createContext<MasterDataContextType>({
  supportedChains: [],
  currencies: [],
});

export const MasterDataContextProvider = ({ children }: { children: any }) => {
  const { supportedChains, currencies } = useMasterData();

  return (
    <MasterDataContext.Provider
      value={{
        supportedChains,
        currencies,
      }}
    >
      {children}
    </MasterDataContext.Provider>
  );
};

================
File: src/contexts/WalletContextProvider.tsx
================
"use client";

import "@rainbow-me/rainbowkit/styles.css";
import React, { useContext, useEffect, useState } from "react";
import { getDefaultConfig, RainbowKitProvider } from "@rainbow-me/rainbowkit";
import { WagmiProvider } from "wagmi";
import {
  mainnet,
  polygon,
  arbitrum,
  optimism,
  base,
  polygonZkEvm,
  bsc,
  avalanche,
  gnosis,
  zksync,
  linea,
} from "wagmi/chains";
import { QueryClientProvider, QueryClient } from "@tanstack/react-query";
import { MasterDataContext } from "./MasterDataProvider";
import { SUPPORTED_CHAINS } from "@/utils/constants";
import { _chains } from "@rainbow-me/rainbowkit/dist/config/getDefaultConfig";

export function WalletContextProvider({ children }: { children?: any }) {
  const [chainConfig, setChainConfig] = useState<_chains>([
    mainnet,
    polygon,
    arbitrum,
    optimism,
    base,
    polygonZkEvm,
    bsc,
    avalanche,
    gnosis,
    zksync,
    linea,
  ]);
  const { supportedChains } = useContext(MasterDataContext);

  // const configureChains = () => {
  //   const chains = [];
  //   for (const chain of supportedChains) {
  //     if (chain.chainId === SUPPORTED_CHAINS.BASE_SEPOLIA) {
  //       chains.push(baseSepolia);
  //     }
  //   }
  //   setChainConfig(chains as unknown as _chains);
  // };

  // useEffect(() => {
  //   if (supportedChains.length) {
  //     configureChains();
  //   }
  // }, [supportedChains]);

  const config = getDefaultConfig({
    appName: "Resolv",
    projectId: process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID as string,
    chains: chainConfig,
    ssr: true,
  });

  const queryClient = new QueryClient();

  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        <RainbowKitProvider coolMode>
          <div className="flex relative items-start h-screen overflow-hidden justify-between pt-8 px-8 sm:pr-16 sm:pl-8">
            {children}
          </div>
        </RainbowKitProvider>
      </QueryClientProvider>
    </WagmiProvider>
  );
}

================
File: src/hooks/useMasterData.tsx
================
import axios from "axios";
import { useEffect, useState } from "react";
import { BASE_API_URL } from "../utils/constants";
import { ICurrency, IMasterChain } from "../interfaces/apis/master-api";

export const useMasterData = () => {
  // state to store all the supported chains by Resolv protocol
  const [supportedChains, setSupportedChains] = useState<IMasterChain[]>([]);

  // state to store all the supported currencies by Resolv protocol
  const [currencies, setCurrencies] = useState<ICurrency[]>([]);

  // fetches all supported chain by calling API
  const fetchSupportedChains = async () => {
    try {
      const response = await axios.get(`${BASE_API_URL}/chain/master`);
      if (response.status === 200) {
        setSupportedChains(response.data.data);
      }
    } catch (error) {
      /* eslint-disable no-console */
      console.log("Failed to fetch supported chains : ", error);
    }
  };

  // fetches all currencies by calling API
  const fetchCurrencies = async () => {
    try {
      const response = await axios.get(`${BASE_API_URL}/currency/master`);
      if (response.status === 200) {
        setCurrencies(response.data.data);
      }
    } catch (error) {
      /* eslint-disable no-console */
      console.log("Failed to fetch currencies : ", error);
    }
  };

  // loads all supported chains on page load
  useEffect(() => {
    fetchSupportedChains();
    fetchCurrencies();
  }, []);

  return {
    supportedChains,
    currencies,
  };
};

================
File: src/images/index.ts
================
export { default as ArrowsIcon } from "./ArrowsIcon.png";
export { default as BlackArrowsIcon } from "./BlackArrowsIcon.png";
export { default as CheckIcon } from "./CheckIcon.png";
export { default as CircleArrowIcon } from "./CircleArrowIcon.png";
export { default as CongratsBox } from "./Congratsbox.png";
export { default as GoodNewsBox } from "./Goodnewsbox.png";
export { default as Logo } from "./logo.png";
export { default as ProtectBox } from "./Protectyourcryptoscreen.png";
export { default as ResolvButton } from "./Resolvbuttoncloseup.png";
export { default as ReturnStolenBox } from "./Returnstolenfundsscreen.png";
export { default as ShieldIcon } from "./ShieldIcon.png";
export { default as SwapTokensBox } from "./Swapyourtokensscreen.png";
export { default as WalletIcon } from "./wallet.png";

================
File: src/interfaces/apis/master-api.ts
================
export interface IMasterChain {
    id: string;
    chainId: string;
    isTestnet: boolean;
    explorerUrl: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string | null;
}

export interface ICurrency {
    name: string;
    symbol: string;
    id: string;
    isActive: boolean;
    createdAt: string;
    updatedAt: string | null;
}

================
File: src/interfaces/routes/index.d.ts
================
export interface RouteType {
    [key: string]: string;
}

================
File: src/interfaces/sidebar/index.d.ts
================
interface SideBarIconProps {
    icon?: string;
    text?: string;
}

================
File: src/utils/constants.ts
================
import { RouteType } from "../interfaces/routes";

/* ==========   EXTERNAL URLS   ========== */
export const RESOLV_WEBSITE_URL = "https://resolv.finance";

/* ==========   BACKEND API BASE URL   ========== */
export const BASE_API_URL = "http://3.232.108.237:8000/resolv/api/v1";

/* ==========   INTERNAL CONSTANTS ========== */
export const routes: RouteType = {
  wallet: "/wallet",
  transactions: "/transactions",
  disputes: "/disputes",
  settings: "/settings",
};

export enum SUPPORTED_CHAINS {
  BASE_SEPOLIA = "84532",
}

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.netlify

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: CNAME
================
resolv.finance

================
File: edge-functions-import-map.json
================
{"imports":{"netlify:edge":"https://edge.netlify.com/v1/index.ts"}}

================
File: index.js
================
const validateEmail = (email) => {
  return email.indexOf('@') !== -1;
};

async function registerUser() {
  const form = document.querySelector('form');
  const input = document.getElementById('input');
  const successBox = document.getElementById('success-box');
  const errorBox = document.getElementById('error-box');
  const feedbackBox = document.getElementById('feedback-box');
  const email = document.getElementById('email-input').value;

  if (!validateEmail(email)) {
    feedbackBox.classList.add('d-block');
    return;
  }
 
  const headers = new Headers();
  headers.append('Content-Type', 'application/json');
  
  const options = {
    method: 'POST',
    headers,
    body: JSON.stringify({email}),
  };

  form.classList.add('loading');
  const response = await fetch('/.netlify/functions/index', options);
  
  if (response.ok) {
    input.classList.add('d-none');
    successBox.classList.remove('d-none');
    feedbackBox.classList.add('d-none');
  }
  else {
    input.classList.add('d-none');
    errorBox.classList.remove('d-none');
  }
  form.classList.remove('loading');
  feedbackBox.classList.remove('d-block');
}

================
File: LICENSE
================
MIT License

Copyright (c) 2022 Resolv

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: netlify.toml
================
[build]
functions = "functions"

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverActions: true,
  },
}

module.exports = nextConfig

================
File: package.json
================
{
  "name": "resolv",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@notionhq/client": "^2.2.11",
    "@rainbow-me/rainbowkit": "^2.1.5",
    "@tanstack/react-query": "^5.52.1",
    "@types/node": "20.4.10",
    "@types/react": "18.2.20",
    "@types/react-dom": "18.2.7",
    "autoprefixer": "10.4.14",
    "axios": "^1.7.4",
    "clsx": "^2.1.1",
    "eslint": "8.47.0",
    "eslint-config-next": "13.4.13",
    "mailgun": "^0.5.0",
    "mailgun-js": "^0.22.0",
    "next": "^14.2.6",
    "postcss": "8.4.27",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "3.3.3",
    "typescript": "5.1.6",
    "viem": "^2.20.0",
    "wagmi": "^2.12.7"
  },
  "devDependencies": {
    "netlify-cli": "^16.0.3"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const defaultTheme = require("tailwindcss/defaultTheme");

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      screens: {
        sm: "640px",
        md: "768px",
        lg: "798px",
      },
    },
    colors: {
      stoneGray: "#F7F7F7",
      stoneGrayDark: "#E6E6E6",
      black: "#000000",
      blue: {
        dark: "#2a72aa",
        DEFAULT: "#e6f4ff",
        light: "#c1e4ff",
      },
      current: "currentColor",
      gray: {
        border: "#c9c9c9",
        dark: "#2b2b2b",
        DEFAULT: "#f7f7f7",
        light: "#5f5f5f",
      },
      green: {
        DEFAULT: "#e0ffef",
        success: "#75b798",
      },
      red: "#ea868f",
      transparent: "transparent",
      white: "#ffffff",
    },
    fontSize: {
      // when base is 16px
      sm: "0.9375rem", // 15px
      base: "1rem",
      lg: ["1.125rem", "1.388888"], // 18px 25px
      xl: ["1.1875rem", "1.5rem"], // 19px 24px
      "2xl": "1.25rem", // 20px
      "3xl": ["1.4375rem", "1.6875rem"], // 23px 27px
      "4xl": "1.5rem", // 24px
      "5xl": ["1.6875rem", "2.125rem"], // 27px 34px
      "6xl": ["2rem", "2.3125rem"], // 32px 37px
      "7xl": ["2.25rem", "2.875rem"], // 36px 46px
      "8xl": ["2.375rem", "3rem"], // 38px 48px
      "9xl": ["2.5rem", "3rem"], // 40px 48px
      "10xl": ["3.75rem", "4.1875rem"], // 60px 67px
      "11xl": "3.9375rem", // 63px
    },
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
        "gradient-to-r": "linear-gradient(231deg, var(--tw-gradient-stops))",
      },
      borderRadius: {
        lg: "1.6875rem", // 27px
        xl: "1.8125rem", // 29px
        "2xl": "2.0625rem", // 33px
        "25xl": "2.3125rem", // 37px
        "3xl": "2.5625rem", // 41px
        "4xl": "3.125rem", // 50px
        full: "3.375rem", // 54px
      },
      fontFamily: {
        raleway: ["Raleway", "sans-serif"],
      },
      height: {
        email: "4rem",
        "98": "25rem",
      },
      lineHeight: {
        "extra-tight": "1.15",
      },
      spacing: {
        "h-logo": "2.44rem",
        explore: "1.125rem",
        "10": "2.658rem",
        "17": "4.0625rem",
        "18": "4.6rem",
        "34": "8.698rem",
      },
      width: {
        email: "30rem",
        "f-logo": "3.375rem",
        "13": "3.4375rem",
        "69": "17.2rem",
      },
      boxShadow: {
        "resolv-button":
          "0px 6px 19.6px -5px rgba(39, 49, 58, 0.12), 0px 0px 4px 2px rgba(255, 255, 255, 0.64) inset, 0px 5px 2px 0px rgba(255, 255, 255, 0.55) inset",
      },
    },
  },
  plugins: [],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
